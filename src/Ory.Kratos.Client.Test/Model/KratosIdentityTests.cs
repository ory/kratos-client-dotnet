/*
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests. 
 *
 * The version of the OpenAPI document: v0.6.0-alpha.15
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Ory.Kratos.Client.Api;
using Ory.Kratos.Client.Model;
using Ory.Kratos.Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Ory.Kratos.Client.Test.Model
{
    /// <summary>
    ///  Class for testing KratosIdentity
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class KratosIdentityTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for KratosIdentity
        //private KratosIdentity instance;

        public KratosIdentityTests()
        {
            // TODO uncomment below to create an instance of KratosIdentity
            //instance = new KratosIdentity();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of KratosIdentity
        /// </summary>
        [Fact]
        public void KratosIdentityInstanceTest()
        {
            // TODO uncomment below to test "IsType" KratosIdentity
            //Assert.IsType<KratosIdentity>(instance);
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'RecoveryAddresses'
        /// </summary>
        [Fact]
        public void RecoveryAddressesTest()
        {
            // TODO unit test for the property 'RecoveryAddresses'
        }
        /// <summary>
        /// Test the property 'SchemaId'
        /// </summary>
        [Fact]
        public void SchemaIdTest()
        {
            // TODO unit test for the property 'SchemaId'
        }
        /// <summary>
        /// Test the property 'SchemaUrl'
        /// </summary>
        [Fact]
        public void SchemaUrlTest()
        {
            // TODO unit test for the property 'SchemaUrl'
        }
        /// <summary>
        /// Test the property 'Traits'
        /// </summary>
        [Fact]
        public void TraitsTest()
        {
            // TODO unit test for the property 'Traits'
        }
        /// <summary>
        /// Test the property 'Test'
        /// </summary>
        [Fact]
        public void TestTest()
        {
            // TODO unit test for the property 'Test'
        }
        /// <summary>
        /// Test the property 'VerifiableAddresses'
        /// </summary>
        [Fact]
        public void VerifiableAddressesTest()
        {
            // TODO unit test for the property 'VerifiableAddresses'
        }

    }

}
