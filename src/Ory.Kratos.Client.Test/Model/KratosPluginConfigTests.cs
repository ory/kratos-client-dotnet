/*
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests. 
 *
 * The version of the OpenAPI document: v0.6.0-alpha.15
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Ory.Kratos.Client.Api;
using Ory.Kratos.Client.Model;
using Ory.Kratos.Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Ory.Kratos.Client.Test.Model
{
    /// <summary>
    ///  Class for testing KratosPluginConfig
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class KratosPluginConfigTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for KratosPluginConfig
        //private KratosPluginConfig instance;

        public KratosPluginConfigTests()
        {
            // TODO uncomment below to create an instance of KratosPluginConfig
            //instance = new KratosPluginConfig();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of KratosPluginConfig
        /// </summary>
        [Fact]
        public void KratosPluginConfigInstanceTest()
        {
            // TODO uncomment below to test "IsType" KratosPluginConfig
            //Assert.IsType<KratosPluginConfig>(instance);
        }


        /// <summary>
        /// Test the property 'Args'
        /// </summary>
        [Fact]
        public void ArgsTest()
        {
            // TODO unit test for the property 'Args'
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            // TODO unit test for the property 'Description'
        }
        /// <summary>
        /// Test the property 'DockerVersion'
        /// </summary>
        [Fact]
        public void DockerVersionTest()
        {
            // TODO unit test for the property 'DockerVersion'
        }
        /// <summary>
        /// Test the property 'Documentation'
        /// </summary>
        [Fact]
        public void DocumentationTest()
        {
            // TODO unit test for the property 'Documentation'
        }
        /// <summary>
        /// Test the property 'Entrypoint'
        /// </summary>
        [Fact]
        public void EntrypointTest()
        {
            // TODO unit test for the property 'Entrypoint'
        }
        /// <summary>
        /// Test the property 'Env'
        /// </summary>
        [Fact]
        public void EnvTest()
        {
            // TODO unit test for the property 'Env'
        }
        /// <summary>
        /// Test the property 'Interface'
        /// </summary>
        [Fact]
        public void InterfaceTest()
        {
            // TODO unit test for the property 'Interface'
        }
        /// <summary>
        /// Test the property 'IpcHost'
        /// </summary>
        [Fact]
        public void IpcHostTest()
        {
            // TODO unit test for the property 'IpcHost'
        }
        /// <summary>
        /// Test the property 'Linux'
        /// </summary>
        [Fact]
        public void LinuxTest()
        {
            // TODO unit test for the property 'Linux'
        }
        /// <summary>
        /// Test the property 'Mounts'
        /// </summary>
        [Fact]
        public void MountsTest()
        {
            // TODO unit test for the property 'Mounts'
        }
        /// <summary>
        /// Test the property 'Network'
        /// </summary>
        [Fact]
        public void NetworkTest()
        {
            // TODO unit test for the property 'Network'
        }
        /// <summary>
        /// Test the property 'PidHost'
        /// </summary>
        [Fact]
        public void PidHostTest()
        {
            // TODO unit test for the property 'PidHost'
        }
        /// <summary>
        /// Test the property 'PropagatedMount'
        /// </summary>
        [Fact]
        public void PropagatedMountTest()
        {
            // TODO unit test for the property 'PropagatedMount'
        }
        /// <summary>
        /// Test the property 'User'
        /// </summary>
        [Fact]
        public void UserTest()
        {
            // TODO unit test for the property 'User'
        }
        /// <summary>
        /// Test the property 'WorkDir'
        /// </summary>
        [Fact]
        public void WorkDirTest()
        {
            // TODO unit test for the property 'WorkDir'
        }
        /// <summary>
        /// Test the property 'Rootfs'
        /// </summary>
        [Fact]
        public void RootfsTest()
        {
            // TODO unit test for the property 'Rootfs'
        }

    }

}
